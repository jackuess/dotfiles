source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug https://github.com/robertmeta/plug.kak noload

plug https://github.com/andreyorst/powerline.kak config %{
    hook global ModuleLoaded powerline %{
        powerline-theme solarized-light
    }
    powerline-start
}

set global tabstop 8

set global grepcmd 'rg --column'

# Highlighting
add-highlighter global/ number-lines
add-highlighter global/ show-matching
add-highlighter global/ column '%opt{autowrap_column}' MenuBackground
add-highlighter global/ regex \h+$ 0:Error  # Trailing whitespace
add-highlighter global/ show-whitespaces

## Highlight search
set-face global search +bi
add-highlighter global/search dynregex '%reg{/}' 0:search

hook global WinSetOption 'filetype=(git-.*|mail)' %{
  set-option buffer autowrap_column 75
}

# LSP
evaluate-commands %sh{kak-lsp --kakoune -s $kak_session}
lsp-enable
map global normal <c-l> ':lsp-hover<ret>'

# Copy/Paste
hook global NormalKey y|d|c %{ nop %sh{
    printf %s "$kak_main_reg_dquote" | xsel --input --clipboard
}}

# Indent/deindent with spaces when hitting <tab>
hook global InsertChar \t %{ try %{
  execute-keys -draft "h<a-h><a-k>\A\h+\z<ret><a-;>;%opt{indentwidth}@"
}}
map global insert <s-tab> '<a-;><lt>'

colorscheme gruvbox-light
# Hack to avoid using termcolors in the *grep* buffer:
hook -group grep-highlight global WinSetOption filetype=grep %{
    add-highlighter window/grep/ regex "^((?:\w:)?[^:\n]+):(\d+):(\d+)?" 1:function 2:value 3:value
}

# goto.kak
source %sh{ echo $(dirname "$kak_source")/plugins/goto.kak }
map -docstring 'buffer'			global goto b '<esc>:<space>goto-buffer<ret>'
map -docstring 'historic command'	global goto : '<esc>:<space>goto-history<ret>'

hook global BufCreate .* %{
    evaluate-commands %sh{
        # Stop if no db available
        global -C "$(dirname $kak_buffile)" --print-dbpath > /dev/null 2>&1 || exit

        printf "map -docstring 'gtag definition' global goto d \
            '<esc>:<space>goto-gtag-under-cursor<ret>'\n"
        printf "map -docstring 'gtag referece' global goto r \
            '<esc>:<space>goto-gtag-under-cursor --reference<ret>'\n"
    }
}

define-command gtags-funcinfo %{
    info %sh{
        global -C "$(dirname "$kak_buffile")" -f "$(basename "$kak_buffile")" | while read -r func line file sig; do
            [ "$line" -gt "$kak_cursor_line" ] && break
            printf '%s: %s\n' "$func" "$sig"
        done | tail -n1
    }
}

define-command gtags-update-tags -docstring 'Update tag files asynchronously' %{
    echo -markup "{Information}launching gtag generation in the background"
    nop %sh{ (
        while ! mkdir .gtags.kaklock 2>/dev/null; do sleep 1; done
        trap 'rmdir .gtags.kaklock' EXIT
        if global -u -C "$(dirname "${kak_buffile}")"; then
            mv .gtags.kaktmp tags
            msg="gtags generation complete"
        else
            msg="gtags generation failed"
        fi
        printf %s\\n "evaluate-commands -client $kak_client echo -markup '{Information}${msg}'" | kak -p ${kak_session}
    ) > /dev/null 2>&1 < /dev/null & }
}

# User mappings
map -docstring 'Show current function'	global user f '<esc>:gtags-funcinfo<ret>'
map -docstring 'Update (G)tags'		global user u '<esc>:gtags-update-tags<ret>'
